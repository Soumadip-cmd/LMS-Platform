import mongoose from "mongoose";

const optionSchema = new mongoose.Schema({
  text: {
    type: String,
    required: true
  },
  isCorrect: {
    type: Boolean,
    required: true
  }
});

const questionSchema = new mongoose.Schema({
  questionText: {
    type: String,
    required: true
  },
  questionType: {
    type: String,
    enum: ["MultipleChoice", "TrueFalse", "FillInTheBlank", "ShortAnswer"],
    required: true
  },
  options: [optionSchema],
  correctAnswer: {
    type: mongoose.Schema.Types.Mixed, // Can be string, array, or boolean
    required: function() {
      return this.questionType === "FillInTheBlank" || this.questionType === "ShortAnswer";
    }
  },
  explanation: {
    type: String
  },
  difficulty: {
    type: String,
    enum: ["Easy", "Medium", "Hard"],
    default: "Medium"
  },
  points: {
    type: Number,
    default: 1
  },
  mediaUrl: {
    type: String
  },
  mediaType: {
    type: String,
    enum: ["image", "audio", "video", "none"],
    default: "none"
  }
});

const attemptSchema = new mongoose.Schema({
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  score: {
    type: Number,
    required: true
  },
  totalPoints: {
    type: Number,
    required: true
  },
  answers: [
    {
      questionId: {
        type: mongoose.Schema.Types.ObjectId,
        required: true
      },
      userAnswer: mongoose.Schema.Types.Mixed,
      isCorrect: Boolean,
      points: Number
    }
  ],
  startTime: {
    type: Date,
    required: true
  },
  endTime: {
    type: Date,
    required: true
  },
  passed: {
    type: Boolean,
    required: true
  },
  feedbackProvided: {
    type: Boolean,
    default: false
  }
}, { timestamps: true });

const quizSchema = new mongoose.Schema({
  title: {
    type: String,
    required: true
  },
  description: {
    type: String
  },
  course: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Course',
    required: true
  },
  lesson: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Lecture'
  },
  language: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Language',
    required: true
  },
  level: {
    type: String,
    enum: ["Beginner", "Intermediate", "Advanced"],
    required: true
  },
  timeLimit: {
    type: Number, // in minutes
    default: 30
  },
  passingScore: {
    type: Number,
    default: 70 // percentage
  },
  questions: [questionSchema],
  isAutoGenerated: {
    type: Boolean,
    default: false
  },
  isPublished: {
    type: Boolean,
    default: false
  },
  allowRetake: {
    type: Boolean,
    default: true
  },
  maxRetakes: {
    type: Number,
    default: 3
  },
  showAnswersAfterSubmission: {
    type: Boolean,
    default: true
  },
  randomizeQuestionOrder: {
    type: Boolean,
    default: false
  },
  creator: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  attempts: [attemptSchema],
  tags: [String],
  status: {
    type: String,
    enum: ["draft", "review", "published", "archived"],
    default: "draft"
  }
}, { timestamps: true });

// Create indexes for better performance
quizSchema.index({ course: 1, status: 1 });
quizSchema.index({ language: 1, level: 1, status: 1 });
quizSchema.index({ creator: 1 });

// Add virtual for attempt count
quizSchema.virtual('attemptCount').get(function() {
  return this.attempts?.length || 0;
});

// Add virtual for average score
quizSchema.virtual('averageScore').get(function() {
  if (!this.attempts || this.attempts.length === 0) return 0;
  
  const totalScore = this.attempts.reduce((sum, attempt) => sum + attempt.score, 0);
  return totalScore / this.attempts.length;
});

// Methods for quiz generation and analysis
quizSchema.methods.checkAnswer = function(questionId, userAnswer) {
  const question = this.questions.id(questionId);
  if (!question) return false;
  
  switch(question.questionType) {
    case 'MultipleChoice':
      // Find selected option
      const selectedOption = question.options.find(option => 
        option._id.toString() === userAnswer
      );
      return selectedOption ? selectedOption.isCorrect : false;
      
    case 'TrueFalse':
      return userAnswer === String(question.options.find(o => o.isCorrect)._id);
      
    case 'FillInTheBlank':
      if (Array.isArray(question.correctAnswer)) {
        // Multiple possible answers
        return question.correctAnswer.some(ans => 
          ans.toLowerCase().trim() === userAnswer.toLowerCase().trim()
        );
      }
      return question.correctAnswer.toLowerCase().trim() === userAnswer.toLowerCase().trim();
      
    case 'ShortAnswer':
      // Use more flexible matching for short answers
      const userAnswerLower = userAnswer.toLowerCase().trim();
      const correctAnswerLower = question.correctAnswer.toLowerCase().trim();
      
      // Simple check if the answer contains key phrases
      return userAnswerLower.includes(correctAnswerLower) || 
             correctAnswerLower.includes(userAnswerLower);
    
    default:
      return false;
  }
};

// Statics for quiz management
quizSchema.statics.generateQuizFromContent = async function(contentText, courseId, languageId, level, options = {}) {
  // This would be implemented with AI integration
  // For now we'll create a placeholder
  
  const defaultOptions = {
    questionCount: 10,
    difficulty: 'Medium',
    questionTypes: ['MultipleChoice', 'TrueFalse'],
    timeLimit: 15
  };
  
  const quizOptions = { ...defaultOptions, ...options };
  
  // In real implementation, this would:
  // 1. Send content to AI service
  // 2. Process returned questions
  // 3. Structure as Quiz document
  
  return new this({
    title: 'Auto-generated Quiz',
    description: 'Automatically generated quiz from content',
    course: courseId,
    language: languageId,
    level: level,
    timeLimit: quizOptions.timeLimit,
    isAutoGenerated: true,
    status: 'draft',
    // other fields would be populated by AI response
  });
};

export const Quiz = mongoose.model("Quiz", quizSchema);