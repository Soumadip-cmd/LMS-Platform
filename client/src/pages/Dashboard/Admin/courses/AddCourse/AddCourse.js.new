import React, { useState, useEffect, useContext, useRef } from "react";
import AdminSidebar from "../../AdminSidebar";
import { useNavigate } from "react-router-dom";
import courseContext from "../../../../../context/course/courseContext";
import "quill/dist/quill.snow.css";
import Quill from "quill";
import {
  LinkIcon,
  Upload,
  Calendar,
  Clock,
  ChevronDown,
  FileText,
  Plus
} from "lucide-react";

const AddCourse = () => {
  // Step tracking
  const [currentStep, setCurrentStep] = useState(1);
  const steps = ["Basics", "Course Material", "Additional"];

  // Basic course information
  const [courseTitle, setCourseTitle] = useState("");
  const [courseUrl, setCourseUrl] = useState("");
  const [description, setDescription] = useState("");
  const [difficulty, setDifficulty] = useState("Beginner");

  // Course settings
  const [visibility, setVisibility] = useState("Public");
  const [lastUpdated, setLastUpdated] = useState(new Date().toLocaleDateString('en-US', { day: 'numeric', month: 'short', year: 'numeric' }));
  const [pricingModel, setPricingModel] = useState("Free");
  const [regularPrice, setRegularPrice] = useState("");
  const [discountedPrice, setDiscountedPrice] = useState("");
  const [currency, setCurrency] = useState("â‚¬");
  const [thumbnail, setThumbnail] = useState(null);

  // Schedule settings
  const [isScheduled, setIsScheduled] = useState(false);
  const [scheduleDate, setScheduleDate] = useState("");
  const [scheduleTime, setScheduleTime] = useState("");
  const [showComingSoon, setShowComingSoon] = useState(false);

  // Media
  const [featuredImage, setFeaturedImage] = useState(null);
  const [introVideo, setIntroVideo] = useState(null);
  const [introVideoUrl, setIntroVideoUrl] = useState("");

  // Options
  const [activeOption, setActiveOption] = useState("General");
  const [language, setLanguage] = useState("");
  const [examLevel, setExamLevel] = useState("");
  const [examPattern, setExamPattern] = useState("");
  const [isPublicCourse, setIsPublicCourse] = useState(true);
  const [isQnA, setIsQnA] = useState(true);
  const [isSequential, setIsSequential] = useState(true);
  const [tags, setTags] = useState("");

  // Live course settings
  const [isLiveCourse, setIsLiveCourse] = useState(false);
  const [liveCourseSettings, setLiveCourseSettings] = useState({
    platform: "Zoom",
    sessionsPerWeek: 2,
    sessionDuration: 60,
    maxStudentsPerSession: 20,
    timeZone: "UTC",
  });

  const navigate = useNavigate();

  const CourseContext = useContext(courseContext);
  const { createCourse, updateLiveCourseSettings, error, clearErrors } = CourseContext;
  const quillRef = useRef(null);

  useEffect(() => {
    if (!quillRef.current) {
      quillRef.current = new Quill("#quill-editor", {
        modules: {
          toolbar: [
            ["bold", "italic", "underline", "strike"],
            ["blockquote", "code-block"],
            [{ header: 1 }, { header: 2 }],
            [{ list: "ordered" }, { list: "bullet" }],
            [{ indent: "-1" }, { indent: "+1" }],
            [{ size: ["small", false, "large", "huge"] }],
            [{ header: [1, 2, 3, 4, 5, 6, false] }],
            [{ color: [] }, { background: [] }],
            [{ font: [] }],
            [{ align: [] }],
            ["clean"],
            ["link", "image"],
          ],
        },
        placeholder: "Enter course description...",
        theme: "snow",
      });

      // Set initial content if any
      if (description) {
        quillRef.current.root.innerHTML = description;
      }

      // Handle content changes
      quillRef.current.on("text-change", function () {
        setDescription(quillRef.current.root.innerHTML);
      });
    }
  }, []);

  useEffect(() => {
    if (error) {
      console.error(error);
      clearErrors();
    }
  }, [error, clearErrors]);

  // Generate course URL from title
  useEffect(() => {
    if (courseTitle) {
      const formattedTitle = courseTitle.toLowerCase().replace(/\s+/g, '-');
      setCourseUrl(`www.preplings.com/exam/goethea1/${formattedTitle}${Math.floor(Math.random() * 10000)}`);
    }
  }, [courseTitle]);

  // Handle featured image upload
  const handleFeaturedImageChange = (e) => {
    if (e.target.files && e.target.files[0]) {
      setFeaturedImage(e.target.files[0]);
    }
  };

  // Handle intro video upload
  const handleIntroVideoChange = (e) => {
    if (e.target.files && e.target.files[0]) {
      setIntroVideo(e.target.files[0]);
    }
  };

  //handleSubmit function
  const handleSubmit = async (status = "draft") => {
    // Create form data for file uploads
    const formData = new FormData();

    // Add main course details
    formData.append("title", courseTitle);
    formData.append("description", description);
    formData.append("level", difficulty);
    formData.append("language", language || "en");
    formData.append("duration[weeks]", 4);
    formData.append("status", status);

    // Set price based on pricing model
    if (pricingModel === "Free") {
      formData.append("price", 0);
      formData.append("discountPrice", 0);
    } else {
      formData.append("price", regularPrice || 49.99);
      formData.append("discountPrice", discountedPrice || 0);
    }

    // Append files if they exist
    if (featuredImage) {
      formData.append("thumbnail", featuredImage);
    }

    try {
      // First create the course
      const course = await createCourse(formData);

      if (!course) {
        throw new Error("Failed to create course");
      }

      // If it's a live course, update the live settings
      if (isLiveCourse && course && course._id) {
        await updateLiveCourseSettings(course._id, {
          isLive: true,
          platform: liveCourseSettings.platform,
          sessionsPerWeek: liveCourseSettings.sessionsPerWeek,
          sessionDuration: liveCourseSettings.sessionDuration,
          maxStudentsPerSession: liveCourseSettings.maxStudentsPerSession,
          timeZone: liveCourseSettings.timeZone,
        });
      }

      // Generate shareable URL
      const courseShareableUrl = `${window.location.origin}/courses/${
        course._id
      }/${encodeURIComponent(courseTitle.replace(/\s+/g, "-").toLowerCase())}`;

      // Navigate to course management or curriculum editor
      navigate(`/admin/courses/${course._id}/curriculum`, {
        state: {
          courseId: course._id,
          courseTitle,
          shareableUrl: courseShareableUrl,
        },
      });
    } catch (error) {
      console.error("Error creating course:", error);
    }
  };

  // Handle next step
  const handleNextStep = () => {
    if (currentStep < steps.length) {
      setCurrentStep(currentStep + 1);
    }
  };

  // Handle previous step
  const handlePrevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  return (
    <div className="flex min-h-screen bg-white">
      <AdminSidebar active="Courses" />

      <div className="flex-1">
        <div className="p-6">
          <h1 className="text-2xl font-medium text-gray-700 mb-6">Add Course</h1>

          {/* Course Builder Nav */}
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center">
              <div className="text-sm font-medium uppercase text-gray-500 mr-4">COURSE BUILDER</div>
              <div className="flex items-center">
                {steps.map((step, index) => (
                  <React.Fragment key={index}>
                    <div className="flex items-center">
                      <div
                        className={`w-6 h-6 rounded-full flex items-center justify-center text-white text-xs mr-2 ${
                          currentStep === index + 1 ? 'bg-yellow-400' : 'bg-gray-200 text-gray-500'
                        }`}
                      >
                        {index + 1}
                      </div>
                      <span className={`text-sm ${currentStep === index + 1 ? 'text-black' : 'text-gray-400'}`}>
                        {step}
                      </span>
                    </div>
                    {index < steps.length - 1 && (
                      <div className="mx-3 h-px w-6 bg-gray-300"></div>
                    )}
                  </React.Fragment>
                ))}
              </div>
            </div>

            <div className="flex space-x-2">
              <button
                className="flex items-center px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white"
                onClick={() => handleSubmit("draft")}
              >
                <FileText size={16} className="mr-2" />
                Save as Draft
              </button>
              <div className="flex">
                <button
                  className="flex items-center px-4 py-2 bg-yellow-400 rounded-l-md text-sm font-medium text-white"
                  onClick={() => handleSubmit("published")}
                >
                  Publish
                </button>
                <button className="flex items-center px-2 py-2 bg-yellow-400 rounded-r-md text-sm font-medium text-white border-l border-yellow-500">
                  <ChevronDown size={16} />
                </button>
              </div>
            </div>
          </div>

          {/* Main content area */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {/* Left side - Course details */}
            <div className="md:col-span-2">
              {currentStep === 1 && (
                <>
                  {/* Course Title */}
                  <div className="mb-6">
                    <label className="block text-sm font-medium text-gray-700 mb-1">Course Title</label>
                    <input
                      type="text"
                      value={courseTitle}
                      onChange={(e) => setCourseTitle(e.target.value)}
                      placeholder="Type here"
                      className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none" />
                  </div>

                  {/* Course URL */}
                  <div className="mb-6">
                    <label className="block text-sm font-medium text-gray-700 mb-1">Course URL</label>
                    <div className="flex items-center text-sm text-blue-600">
                      <span>www.preplings.com/exam/goethea1/{courseTitle ? courseTitle.toLowerCase().replace(/\s+/g, '-') : 'algoetheea10123'}</span>
                      <LinkIcon size={16} className="ml-2 text-blue-500" />
                    </div>
                  </div>

                  {/* Course Description */}
                  <div className="mb-6">
                    <div className="flex items-center justify-between mb-1">
                      <label className="block text-sm font-medium text-gray-700">Course Description</label>
                      <div className="flex items-center">
                        <button className="flex items-center px-2 py-1 border border-gray-300 rounded-l-md text-sm text-gray-700">
                          <span>Paragraph</span>
                          <ChevronDown size={16} className="ml-1" />
                        </button>
                        <div className="flex border-l border-gray-300">
                          <button className="p-1 hover:bg-gray-100 rounded font-bold">B</button>
                          <button className="p-1 hover:bg-gray-100 rounded italic">I</button>
                          <button className="p-1 hover:bg-gray-100 rounded underline">U</button>
                        </div>
                      </div>
                    </div>
                    <div className="border border-gray-300 rounded-md">
                      <div id="quill-editor" className="min-h-[200px]"></div>
                    </div>
                  </div>
                </>
              )}

              {currentStep === 2 && (
                <div className="bg-gray-50 p-8 rounded-lg text-center">
                  <h3 className="text-lg font-medium text-gray-700 mb-2">Course Material</h3>
                  <p className="text-gray-500">You'll be able to add course content after creating the basic course information.</p>
                </div>
              )}

              {currentStep === 3 && (
                <div className="bg-gray-50 p-8 rounded-lg text-center">
                  <h3 className="text-lg font-medium text-gray-700 mb-2">Additional Information</h3>
                  <p className="text-gray-500">You'll be able to add additional information after creating the basic course details.</p>
                </div>
              )}

              {/* Navigation buttons */}
              <div className="mt-8 flex justify-end">
                {currentStep > 1 && (
                  <button
                    onClick={handlePrevStep}
                    className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 mr-4 hover:bg-gray-50"
                  >
                    Previous
                  </button>
                )}
                <button
                  onClick={currentStep < 3 ? handleNextStep : handleSubmit}
                  className="px-4 py-2 bg-yellow-400 text-white rounded-md hover:bg-yellow-500"
                >
                  {currentStep < 3 ? 'Next' : 'Create Course'}
                </button>
              </div>

            {/* Right side - Options */}
            <div>
              <div>
                <h3 className="text-sm font-medium mb-2">Visibility</h3>
                <div className="relative mb-1">
                  <div className="relative">
                    <select
                      value={visibility}
                      onChange={(e) => setVisibility(e.target.value)}
                      className="w-full p-2 border border-gray-300 rounded-md appearance-none pr-8"
                    >
                      <option value="Public">Public</option>
                      <option value="Private">Private</option>
                      <option value="Password">Password Protected</option>
                    </select>
                    <div className="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
                      <ChevronDown size={16} className="text-gray-400" />
                    </div>
                  </div>
                </div>
                <p className="text-xs text-gray-500">Last updated on {lastUpdated}</p>
              </div>

              <div className="mt-6">
                <h3 className="text-sm font-medium mb-2">Pricing Model</h3>
                <div className="flex items-center space-x-4 mb-4">
                  <label className="flex items-center">
                    <input
                      type="radio"
                      name="pricing"
                      checked={pricingModel === "Free"}
                      onChange={() => setPricingModel("Free")}
                      className="mr-2" />
                    <span className="text-sm">Free</span>
                  </label>
                  <label className="flex items-center">
                    <input
                      type="radio"
                      name="pricing"
                      checked={pricingModel === "Paid"}
                      onChange={() => setPricingModel("Paid")}
                      className="mr-2" />
                    <span className="text-sm">Paid</span>
                  </label>
                </div>

                {pricingModel === "Paid" && (
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Regular Price</label>
                      <div className="flex">
                        <div className="relative">
                          <select
                            value={currency}
                            onChange={(e) => setCurrency(e.target.value)}
                            className="h-full rounded-l-md border border-r-0 border-gray-300 bg-white py-2 px-3 appearance-none"
                          >
                            <option value="â‚¬">â‚¬</option>
                            <option value="$">$</option>
                            <option value="Â£">Â£</option>
                          </select>
                          <div className="absolute inset-y-0 right-0 flex items-center pr-1 pointer-events-none">
                            <ChevronDown size={14} className="text-gray-400" />
                          </div>
                        </div>
                        <input
                          type="number"
                          min="0"
                          step="0.01"
                          value={regularPrice}
                          onChange={(e) => setRegularPrice(e.target.value)}
                          className="flex-1 rounded-r-md border border-gray-300 py-2 px-3"
                          placeholder="49.99" />
                      </div>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Discounted Price</label>
                      <div className="flex">
                        <div className="relative">
                          <select
                            value={currency}
                            className="h-full rounded-l-md border border-r-0 border-gray-300 bg-white py-2 px-3 appearance-none"
                            disabled
                          >
                            <option value="â‚¬">â‚¬</option>
                          </select>
                          <div className="absolute inset-y-0 right-0 flex items-center pr-1 pointer-events-none">
                            <ChevronDown size={14} className="text-gray-400" />
                          </div>
                        </div>
                        <input
                          type="number"
                          min="0"
                          step="0.01"
                          value={discountedPrice}
                          onChange={(e) => setDiscountedPrice(e.target.value)}
                          className="flex-1 rounded-r-md border border-gray-300 py-2 px-3"
                          placeholder="0" />
                      </div>
                    </div>
                  </div>
                )}
              </div>

              <div className="mt-6">
                <h3 className="text-sm font-medium mb-2">Featured Image</h3>
                <div className="border border-dashed border-gray-300 rounded-md p-4 text-center">
                  <div className="flex flex-col items-center justify-center">
                    <button
                      onClick={() => document.getElementById('featuredImageInput').click()}
                      className="flex items-center justify-center px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
                    >
                      <Upload size={16} className="mr-2" />
                      Upload Thumbnail
                    </button>
                    <input
                      id="featuredImageInput"
                      type="file"
                      accept="image/*"
                      onChange={handleFeaturedImageChange}
                      className="hidden" />
                    <p className="text-xs text-gray-500 mt-2">
                      JPEG, PNG, GIF, and WebP formats, up to 512 MB
                    </p>
                  </div>
                </div>
              </div>

              <div className="mt-6">
                <h3 className="text-sm font-medium mb-2">Intro Video</h3>
                <div className="border border-dashed border-gray-300 rounded-md p-4">
                  <p className="text-xs text-gray-500 mb-2">MP4, and WebM formats, up to 512 MB</p>
                  <div className="flex flex-col items-center justify-center">
                    <button
                      onClick={() => document.getElementById('introVideoInput').click()}
                      className="flex items-center justify-center w-full px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 mb-2"
                    >
                      <Upload size={16} className="mr-2" />
                      Upload Video
                    </button>
                    <input
                      id="introVideoInput"
                      type="file"
                      accept="video/*"
                      onChange={handleIntroVideoChange}
                      className="hidden" />
                    <p className="text-center text-gray-500 text-sm mb-2">Or</p>
                    <input
                      type="text"
                      placeholder="Type URL here.."
                      value={introVideoUrl}
                      onChange={(e) => setIntroVideoUrl(e.target.value)}
                      className="w-full p-2 border border-gray-300 rounded-md" />
                  </div>
                </div>
              </div>

              <div className="mt-6">
                <div className="flex items-center justify-between mb-2">
                  <h3 className="text-sm font-medium">Schedule</h3>
                  <div className="relative">
                    <div
                      className={`w-12 h-6 flex items-center ${isScheduled ? 'bg-yellow-400' : 'bg-gray-200'} rounded-full p-1 cursor-pointer`}
                      onClick={() => setIsScheduled(!isScheduled)}
                    >
                      <div className={`bg-white w-4 h-4 rounded-full shadow-md transform ${isScheduled ? 'translate-x-6' : 'translate-x-0'}`}></div>
                    </div>
                  </div>
                </div>

                {isScheduled && (
                  <div className="mt-2">
                    <div className="grid grid-cols-2 gap-2">
                      <div className="relative">
                        <div className="flex items-center border border-gray-300 rounded-md p-2">
                          <Calendar size={18} className="text-gray-400 mr-2" />
                          <input
                            type="text"
                            placeholder="Select Date"
                            value={scheduleDate}
                            onChange={(e) => setScheduleDate(e.target.value)}
                            className="w-full border-none focus:outline-none" />
                        </div>
                      </div>
                      <div className="relative">
                        <div className="flex items-center border border-gray-300 rounded-md p-2">
                          <Clock size={18} className="text-gray-400 mr-2" />
                          <input
                            type="text"
                            placeholder="hh:mm AM"
                            value={scheduleTime}
                            onChange={(e) => setScheduleTime(e.target.value)}
                            className="w-full border-none focus:outline-none" />
                        </div>
                      </div>
                    </div>

                    <div className="mt-2 flex items-center">
                      <input
                        type="checkbox"
                        id="showComingSoon"
                        checked={showComingSoon}
                        onChange={() => setShowComingSoon(!showComingSoon)}
                        className="mr-2" />
                      <label htmlFor="showComingSoon" className="text-sm text-gray-600">
                        Show "Coming Soon" Tag on the content poster
                      </label>
                    </div>
                  </div>
                )}
              </div>

              <div className="mt-6">
                <h3 className="text-sm font-medium mb-2">Tags</h3>
                <input
                  type="text"
                  placeholder="Type here"
                  value={tags}
                  onChange={(e) => setTags(e.target.value)}
                  className="w-full p-2 border border-gray-300 rounded-md" />
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AddCourse;